metrics <- list("pearson"=std_pearson_corr_coef, "cramers"=cramers_v)
metric.mat <- matrix(nrow=length(covs), ncol=length(methods), dimnames = list(covs, names(metrics)))
for (c in covs){
# Get batch design
bd <- batch_design(se, c)
for (m in names(methods)){
# Compute metric and place in appropriate slot
metric.mat[c, m] <- metrics[m](bd)
}
}
m
metrics[m]
metrics[m](bd)
bd
methods$pearson(bd)
m
metrics$pearson()
metrics$pearson
metrics[m]
metrics[m](bd)
metrics <- list("pearson"=std_pearson_corr_coef, "cramers"=cramers_v)
metric.mat <- matrix(nrow=length(covs), ncol=length(methods), dimnames = list(covs, names(metrics)))
for (c in covs){
# Get batch design
bd <- batch_design(se, c)
for (m in names(methods)){
# Compute metric and place in appropriate slot
met <- metrics[m]
metric.mat[c, m] <- met(bd)
}
}
metrics <- list("pearson"=std_pearson_corr_coef, "cramers"=cramers_v)
metric.mat <- matrix(nrow=length(covs), ncol=length(methods), dimnames = list(covs, names(metrics)))
for (c in covs){
# Get batch design
bd <- batch_design(se, c)
for (m in names(methods)){
# Compute metric and place in appropriate slot
metric.mat[c, m] <- metrics[m](bd)
}
}
metrics[m](bd)
metrics[m]()
metrics[m]
metrics[m]
t <- metrics[m]
t
t(bd)
metrics <- list("pearson"=std_pearson_corr_coef, "cramers"=cramers_v)
metric.mat <- matrix(nrow=length(covs), ncol=length(methods), dimnames = list(covs, names(metrics)))
for (c in covs){
# Get batch design
bd <- batch_design(se, c)
for (m in names(methods)){
# Compute metric and place in appropriate slot
met <- metrics[m]
metric.mat[c, m] <- met(bd)
}
}
c(methods, names(methods))
c(methods, names(methods))[1]
x<-c(methods, names(methods))
View(x)
metrics
metrics <- list("pearson"=std_pearson_corr_coef, "cramers"=cramers_v)
metric.mat <- matrix(nrow=length(covs), ncol=length(methods), dimnames = list(covs, names(metrics)))
for (c in covs){
# Get batch design
bd <- batch_design(se, c)
for (m in names(metrics)){
# Compute metric and place in appropriate slot
met <- metrics[m]
metric.mat[c, m] <- met(bd)
}
}
View(met)
# Compute metric and place in appropriate slot
met <- metrics[m]
met
# Compute metric and place in appropriate slot
met <- metrics[[m]]
metric.mat[c, m] <- metrics[[m]](bd)
metrics <- list("pearson"=std_pearson_corr_coef, "cramers"=cramers_v)
metric.mat <- matrix(nrow=length(covs), ncol=length(methods), dimnames = list(covs, names(metrics)))
for (c in covs){
# Get batch design
bd <- batch_design(se, c)
for (m in names(metrics)){
# Compute metric and place in appropriate slot
met <- metrics[[m]]
metric.mat[c, m] <- metrics[[m]](bd)
}
}
metrics <- list("pearson"=std_pearson_corr_coef, "cramers"=cramers_v)
metrics
metrics[m]
metrics[[m]]
metric.mat
confound_metrics <- function(se){
metrics <- list("Pearson Correlation Coefficient"=std_pearson_corr_coef, "Cramer's V"=cramers_v)
metric.mat <- matrix(nrow=length(covs), ncol=length(methods), dimnames = list(covs, names(metrics)))
for (c in covs){
# Get batch design
bd <- batch_design(se, c)
for (m in names(metrics)){
# Compute metric and place in appropriate slot
metric.mat[c, m] <- metrics[[m]](bd)
}
}
# Add metrics to se
metadata(se)$confound.metrics <- metric.mat
}
conf\
confound_metrics <- function(se){
metrics <- list("Pearson Correlation Coefficient"=std_pearson_corr_coef, "Cramer's V"=cramers_v)
metric.mat <- matrix(nrow=length(covs), ncol=length(methods), dimnames = list(covs, names(metrics)))
for (c in covs){
# Get batch design
bd <- batch_design(se, c)
for (m in names(metrics)){
# Compute metric and place in appropriate slot
metric.mat[c, m] <- metrics[[m]](bd)
}
}
# Add metrics to se
return(metric.mat)
}
confound_metrics(se)
se <- ingest_data('~/BatchQC/data/protein_data.csv', '~/BatchQC/data/protein_md.csv')
metadata(se)
View(se)
metadata(se)$confound.metrics <- confound_metrics(se)
View(se)
ingest_data <- function(counts_path, metadata_path){
require(SummarizedExperiment)
# Format for input:
## Counts must be a comma delimited csv file with header and sample name in the first row.
## Metadata is the same.
# Read in counts (assuming first column is index)
counts <- read.csv(counts_path, row.names=1,header=T)
# Read in metadata
md <- read.csv(metadata_path, row.names=1,header=T)
# CHECK that "Sample" and "Batch" columns are in md and find covariates
cols <- names(md)
covs <- cols[cols != 'Batch']
# Add in check of integrity: only create se object if all the samples in the metadata are presented in counts and vice versa, return NULL object else and capture the error later.
if (all(rownames(md)%in%colnames(counts))&all(colnames(counts)%in%rownames(md))) {
# Order the columns of the count data in the order of samples in metadata.
counts = counts[,match(rownames(md),colnames(counts))]
se <- SummarizedExperiment(list(counts=counts), colData=md)
# Add covariates
metadata(se)$covariates <- covs
# Get counfounding metrics
metadata(se)$confound.metrics <- confound_metrics(se)
}
else {
se = NULL
}
return(se)
}
se <- ingest_data('~/BatchQC/data/protein_data.csv', '~/BatchQC/data/protein_md.csv')
names(metadata(se))
runApp('inst/shiny')
metadata(se)$confound.metrics
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
library(shiny)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
a=read.csv('../../../Desktop/test data/metadata.txt')
View(a)
a=read.csv('../../../Desktop/test data/metadata.txt',row.names = 1)
b=read.table('../../../Desktop/test data/GSE147507_RawReadCounts_Human.tsv/GSE147507_RawReadCounts_Human.tsv',header = T,row.names = 1)
b=b[,colnames(b)%in%rownames(a)]
View(b)
b=read.table('../../../Desktop/test data/GSE147507_RawReadCounts_Human.tsv/GSE147507_RawReadCounts_Human.tsv',header = T,row.names = 1)
b=read.table('../../../Desktop/test data/GSE147507_RawReadCounts_Human.tsv/GSE147507_RawReadCounts_Human.tsv',header = T,row.names = 1,check.names = F)
b=b[,colnames(b)%in%rownames(a)]
write.csv(a,'data/metadata.csv',quote = F)
write.csv(b,'data/counts.csv',quote = F)
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
?eval
?eval()
library(dplyr)
library(tibble)
?eval()
?eval
cor.test(a$Infection,a$Source)
as.symbol(a$Infection)
eval(as.symbol(a$Infection))
View(a)
a$Infection
?as.symbol()
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
as.symbol('Batch')
'Batch'
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
library(SummarizedExperiment)
se=SummarizedExperiment(assays = list(b),colData = a)
metadata(se)
View(a)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
colSums(se)
se=SummarizedExperiment(b,colData = a)
colSums(se)
se=SummarizedExperiment(list(b),colData = a)
colSums(se)
assay(se)
names(assay(se))
se=SummarizedExperiment(list(counts=b),colData = a)
names(assay(se))
assayNames((se))
libsizes <- colSums(se@assays$counts)
se@assays$counts
se@assays$counts
assay(se)
colSums(assay(se))
libsizes <- colSums(assay(se))
assay(se)/libsizes
CPM(sce) <- assay(se)/libsizes*(10^6)
CPM(se) <- assay(se)/libsizes*(10^6)
assay(se)
assay(se)$counts
se <- SummarizedExperiment(list(counts=b), colData=a)
assay(se)$counts
colData(se)
se@assays$counts
assay(se)
assay(se)[['counts']]
libsizes <- colSums(assay(se))
assay(se)$CPM <- assay(se)/libsizes*(10^6)
assay(se)
libsizes <- colSums(as.matrix(assay(se)))
assay(se)$CPM <- as.matrix(assay(se))/libsizes*(10^6)
se <- SummarizedExperiment(assay=list(counts=b), colData=a)
assay(se)
assay(se)$counts
se@assays
se@assays@data
se@assays@data$counts
assay(se)$counts
assay(se)$data$counts
assay(se)
se <- SummarizedExperiment(assay=b, colData=a)
se@assays@metadata
se@assays@data
libsizes <- colSums(b)
CPM <- b/libsizes*(10^6)
se <- SummarizedExperiment(assay=list(counts=b,
CPM=CPM), colData=a)
se@assays$CPM
assayNames(se)
assay(SE)$CPM
assay(se)$CPM
se@assays@data$CPM
require(EBSeq)
MOR=counts[rowSums(b)>10,]
MOR=b[rowSums(b)>10,]
library(EBSeq)
library(EBSeqHMM)
vargenes=apply(log(CPM+1),1,var)
vargenes
metadata(se)$var_genes=apply(log(CPM+1),1,var)
se@metadata$var_genes
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
assayNames(se)
se = SummarizedExperiment(list(counts=b,CPM=CPM,MOR=MOR),colData = a)
se = SummarizedExperiment(list(counts=b,CPM=CPM),colData = a)
assayNames(se)
runApp('inst/shiny')
colnames(colData(se))
se = SummarizedExperiment(list(counts=b,CPM=CPM),colData = a)
colnames(colData(se))
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
dim(se)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
se = SummarizedExperiment(list(counts=b,CPM=CPM),colData = a)
se@assays@data[['CPM']]
input$Normalization_method='CPM'
input=list()
input$Normalization_method='CPM'
data=se@assays@data[[input$Normalization_method]]
vargenes=apply(data,1,var)
vargenes
order(vargenes,decreasing = T)
vargenes=vargenes[order(vargenes,decreasing = T)]
vargenes
cor(data)
library(pheatmap)
pheatmap(cor(data[vargenes[seq(1,500)],]))
data
cor(data[vargenes[seq(1,500)],])
(data[vargenes[seq(1,500)],])
vargenes[seq(1,500)]
(data[names(vargenes[seq(1,500)]),])
pheatmap(cor((data[names(vargenes[seq(1,500)]),])))
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
View(se)
saveRDS(se,'data/RNASeq_Example.rda')
a=readRDS('data/RNASeq_Example.rda')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
shiny::runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
counts=read.csv('data/counts.csv',header = T,row.names = 1,check.names = F)
library(edgeR)
coldata=read.csv('data/metadata.csv',header = T,row.names = 1,check.names = F)
se=readRDS('data/RNASeq_Example.rda')
se=calcNormFactors.SummarizedExperiment(se)
se
se=readRDS('data/RNASeq_Example.rda')
?calcNormFactors.SummarizedExperiment()
a=calcNormFactors(counts,'TMM')
counts
counts=as.matrix(counts)
a=calcNormFactors(counts,'TMM')
a=calcNormFactors(counts,method = 'TMM')
cpm(a)
assay(se)
assayNames(se)
assayNames(se)['CPM']
assay(se)['CPM']
assay(se)[['CPM']]
assay(se)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
install.packages('plotly')
se=readRDS('data/RNASeq_Example.rda')
colData(se)
a=colData(se)
View(a)
a=data.frame(a)
View(a)
runApp('inst/shiny')
runApp('inst/shiny')
library(data.table)
runApp('inst/shiny')
?data.table()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
se=readRDS('data/RNASeq_Example.rda')
data=reactivevalue$se@assays@data[[input$Normalization_method_heatmap]]
data=as.matrix(data)
data=apply(data,c(1,2),as.numeric)
data=data[rowSums(data)!=0,]
vargenes=apply(data,1,var)
vargenes=vargenes[order(vargenes,decreasing = T)]
vargenes=vargenes[seq(1,input$top_n)]
data=log(data+1)
data=data[names(vargenes),]
data=data+1
for (i in 1:nrow(data)) {
data[i,]=(data[i,]-mean(data[i,]))/sd(data[i,])
}
coldata=colData(reactivevalue$se)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
library(shiny)
library(shiny)
library(shinyjs)
library(shinythemes)
require(SummarizedExperiment)
require(pheatmap)
require(ggplot2)
require(plotly)
require(EBSeq)
require(data.table)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
a=read.csv('data/counts.csv',header = T,row.names = 1)
b=head(a)
View(b)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
install.packages('reader')
library(reader)
get.delim('data/protein_data.csv')
runApp('inst/shiny')
runApp('inst/shiny')
get.delim('data/metadata.csv')
get.delim('data/metadata.csv',n = 100)
get.delim('data/metadata.csv',n = 100)
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
shiny::runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
Counts=read.csv('data/counts.csv',header = T,row.names = 1)
Counts=Counts[rowSums(Counts)>0,]
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
color_palette= c(seq(-6, 6, by=0.1))
library(colorRampPalette)
install.packages('dichromat')
library(dichromat)
color_palette= c(seq(-6, 6, by=0.1))
color_palette <- c( colorRampPalette(colors = c("blue","white", "orange", "red", "purple"))(length(color_palette)/2))
breaks= c(seq(-6, 6, by=0.1))
color_palette <- c( colorRampPalette(colors = c("blue","white", "orange", "red", "purple"))(length(breaks)/2))
runApp('inst/shiny')
breaks= c(seq(-3, 3, by=0.1))
color_palette <- c( colorRampPalette(colors = c("blue","white", "orange", "red", "purple"))(length(breaks)/2))
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
